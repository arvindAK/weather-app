{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperture","humidity","pressure","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","list","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2da4ab9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Titles = () => (\n  <div className=\"title-text\">\n    <h1 className=\"title-container__title\">Weather Finder</h1>\n    <p className=\"title-container__subtitle\">Find out the current temperture, conditions and more...</p>\n  </div>\n);\n\nexport default Titles;\n","import React from 'react';\n\nconst Form = props => (\n  <form onSubmit={props.getWeather}>\n    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n    <button>Get Weather</button>\n  </form>\n);\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => (\n  <div className =\"weather__info\">\n\n  {\n    props.city && props.country && <p className=\"weather__key\">Location:\n    <span className=\"weather__value\"> { props.city }, { props.country }</span>\n    </p>\n  }\n  {\n    props.temperture && <p className=\"weather__key\">Temperture:\n    <span className=\"weather__value\"> { props.temperture }Â°C</span>\n    </p>\n  }\n  {\n    props.humidity && <p className=\"weather__key\">Humidity:\n    <span className=\"weather__value\"> { props.humidity }%</span>\n    </p>\n  }\n  {\n    props.pressure && <p className=\"weather__key\">Pressure:\n    <span className=\"weather__value\"> { props.pressure }mb</span>\n    </p>\n  }\n  {\n    props.description && <p className=\"weather__key\">Description:\n    <span className=\"weather__value\"> { props.description }</span>\n    </p>\n  }\n  {\n    props.error && <p className=\"weather__key\">{props.error}</p>\n  }\n  </div>\n);\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Titles from \"./components/Titles\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\nimport './App.css';\n\nconst API_KEY = \"f968fc1e7528c410f4692e40fa0efc7c\";\n\nclass App extends Component {\n  state = {\n    temperture: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    pressure: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/find?q=${city},${country}&units=metric&appid=${API_KEY}`);\n    const data = await api_call.json();\n    console.log(data)\n    if (city && country) {\n      this.setState({\n        temperture: data.list[0].main.temp,\n        city: data.list[0].name,\n        country: data.list[0].sys.country,\n        humidity: data.list[0].main.humidity,\n        pressure: data.list[0].main.pressure,\n        description: data.list[0].weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        error: 'Please enter a valid value for City and Country!'\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n          <div className=\"container\">\n            <div className=\"title-container\">\n              <Titles />\n            </div>\n            <div className=\"form-container\">\n              <Form getWeather = {this.getWeather}/>\n              <Weather\n                temperture = {this.state.temperture}\n                city = {this.state.city}\n                country = {this.state.country}\n                humidity = {this.state.humidity}\n                pressure = {this.state.pressure}\n                description = {this.state.description}\n                error = {this.state.error}\n              />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}